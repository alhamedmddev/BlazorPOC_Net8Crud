@page "/addemployee"
@page "/editemployee/{empId:int}"
@inject NavigationManager NavigationManager
@inject IEmployeeService _empService
@rendermode InteractiveServer


<h3>AddEmployee</h3>

<EditForm Model="@employeeVM" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    @if (!string.IsNullOrEmpty(message))
    {
        if (message.ToLower().Contains("success"))
        {
            <div class="alert alert-success" role="alert">
                <p>@message</p>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                <p>@message</p>
            </div>
        }
        


    }

    <div class="mb-3">
        <label for="Name" class="form-label">First Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employeeVM.FirstName" />
        </div>
        <ValidationMessage For="@(() => employeeVM.FirstName)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Last Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employeeVM.LastName" />
        </div>
        <ValidationMessage For="@(() => employeeVM.LastName)" />
    </div>
    <div class="mb-3">
        <label for="Cellnumber" class="form-label">Phone No</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employeeVM.PhoneNo" />
        </div>
        <ValidationMessage For="@(() => employeeVM.PhoneNo)" />
    </div>
    <div class="mb-3">
        <label for="Emailid" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employeeVM.Email" />
        </div>
        <ValidationMessage For="@(() => employeeVM.Email)" />
    </div>
    <div class="mb-3">
        <label for="Emailid" class="form-label">Designation</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employeeVM.Designation" />
        </div>
        <ValidationMessage For="@(() => employeeVM.Designation)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public int empId { get; set; }
    protected string Title = "Add";
    public EmployeeVM employeeVM = new();
    string message;

    protected override async Task OnParametersSetAsync()
    {
        if (empId != 0)
        {
            Title = "Edit";
            var result = await _empService.GetEmployeeByIDAsync(empId);
            if (result.IsGetSuccess)
            {
                employeeVM = result.employeeVM;
            }
            else
            {
                message = "something wrong happend....! plz try again.."; 
            }

        }
    }
    protected async Task SaveUser()
    {
        if (employeeVM.Id != 0)
        {


            var result = await _empService.UpdateEmpAsync(employeeVM);
            if (result.IsEmpSaved)
            {
                Cancel();
            }
            else
            {
                message = result.message;
            }
        }
        else
        {

            var result = await _empService.SaveNewEmpAsync(employeeVM);
            if (result.IsEmpSaved)
            {
                Cancel();
            }
            else
            {
                message = result.message;
            }
        }
        
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/employeeList");
    }
}
