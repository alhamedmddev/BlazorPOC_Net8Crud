@page "/DeleteEmployee/{empId:int}"
@inject NavigationManager NavigationManager
@inject IEmployeeService _empService
@rendermode InteractiveServer

<div class="ma-6 d-flex justify-center">
    <MudChip Color="Color.Primary">
        <h3>Delete Employee</h3>
    </MudChip>
</div>


<div class="ma-6 d-flex p-3  justify-center border-1" style="background-color:#efefef">
    
    <MudCard Width="500px">
        <MudForm Model="employeeVM" @ref="form">
            <MudCardContent>
                <MudText Typo="Typo.h6">Do you want to delete this Employee?</MudText>


          
    @if (!string.IsNullOrEmpty(message))
    {
        if (message.ToLower().Contains("success"))
        {
            <div class="alert alert-success" role="alert">
                <p>@message</p>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                <p>@message</p>
            </div>
        }
    }


        <MudTextField @bind-Value="employeeVM.FirstName"
                      For="@(() => employeeVM.FirstName)"
                      Immediate="true"
                      Label="First Name"
                      Variant="Variant.Filled" />

        <MudTextField @bind-Value="employeeVM.LastName"
                      For="@(() => employeeVM.LastName)"
                      Immediate="true"
                      Label="Last Name"
                      Variant="Variant.Filled" />
        <MudTextField @bind-Value="employeeVM.PhoneNo"
                      For="@(() => employeeVM.PhoneNo)"
                      Immediate="true"
                      Label="Phone No"
                      Variant="Variant.Filled" />
        <MudTextField @bind-Value="employeeVM.Email"
                      For="@(() => employeeVM.Email)"
                      Immediate="true"
                      Label="Email"
                      Variant="Variant.Filled" />
        <MudTextField @bind-Value="employeeVM.Designation"
                      For="@(() => employeeVM.Designation)"
                      Immediate="true"
                      Label="Designation"
                      Variant="Variant.Filled" />
    






     <MudCardActions>
                    <MudButton Variant="Variant.Filled" @onclick="(async () => await RemoveUser(employeeVM.Id))" Color="Color.Secondary">Delete</MudButton>
        @* <input type="submit" value="Delete" @onclick="(async () => await RemoveUser(employeeVM.Id))" class="btn btn-danger" /> *@
       @*  <input type="submit" value="Cancel" @onclick="(() => Cancel())" class="btn btn-warning" /> *@
    </MudCardActions>
            </MudCardContent>
        </MudForm>
    </MudCard>
</div>

@code {
    [Parameter]
    public int empId { get; set; }
    protected string Title = "Add";
    public EmployeeVM employeeVM = new();
    string message;
    MudForm form;

    protected override async Task OnParametersSetAsync()
    {
        var result = await _empService.GetEmployeeByIDAsync(empId);
        if (result.IsGetSuccess)
        {
            employeeVM = result.employeeVM;
        }
        else
        {
            message = "something wrong happend....! plz try again..";
        }
    }
    protected async Task RemoveUser(int empID)
    {
        var result = await _empService.DeleteEMployeeAsync(empID);
        if (result.IsGetSuccess)
        {
            Cancel();
        }
        else
        {
            message = result.message;
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/EmployeeList");
    }
}
