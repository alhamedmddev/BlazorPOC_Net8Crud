@page "/EmployeeList"
@* @attribute [Authorize] *@
@inject IEmployeeService _empService
@rendermode InteractiveServer


<MudCard Class="mt-5">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">Employee Details</MudText>
        </CardHeaderContent>
    </MudCardHeader>
     <MudCardContent>

<MudLink href='/addemployee' Class="border-solid border-2 mud-border-primary pa-4">Add Employee</MudLink>
<MudTable Items="@Employees" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<EmployeeVM,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>

        <MudText Typo="Typo.h6">Employee List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>FirstName</MudTh>
        <MudTh>LastName</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>PhoneNo</MudTh>
        <MudTh>Designation</MudTh>
                <MudTh>Edit</MudTh>
                <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Last 0Name">@context.LastName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone No">@context.PhoneNo</MudTd>
            <MudTd DataLabel="Designation">@context.Designation</MudTd>
            <MudTd>
                        <MudLink href="@getlink("edit",context.Id)" Variant="Variant.Filled" Color="Color.Primary">
                            Edit
                        </MudLink>
            </MudTd>
            <MudTd>
                        <MudLink href="@getlink("delete",context.Id)" Variant="Variant.Filled" Color="Color.Secondary">
                            Delete
                        </MudLink>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>

        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.FirstName</MudText>
        </div>
    </div>
</MudCardContent>
</MudCard>
    

    @code {
    // List<EmployeeVM> empList = new List<EmployeeVM>();
    protected string SearchString { get; set; } = string.Empty;

    protected List<EmployeeVM> searchUserData = new();
    string message;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private EmployeeVM selectedItem1 = null;
    private HashSet<EmployeeVM> selectedItems = new HashSet<EmployeeVM>();

    private IEnumerable<EmployeeVM> Employees = new List<EmployeeVM>();
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    protected async Task GetUser()
    {

        var result = await _empService.GetEmployeeAsync();
        if (result.IsGetSuccess)
        {
            Employees = result.employeeVM;

        }
        else
        {
            message = "something went wrong please try again...!";   
        }


    }

    private bool FilterFunc1(EmployeeVM emp) => FilterFunc(emp, searchString1);

    private bool FilterFunc(EmployeeVM emp, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (emp.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (emp.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{emp.PhoneNo} {emp.LastName} {emp.Designation}".Contains(searchString))
            return true;
        return false;
    }
    public string getlink(string type, int value)
    {
        if (type == "edit")
        {
            return "/editemployee/" + value.ToString();
        }
        else
        {
            return "/DeleteEmployee/" + value.ToString();
        }
    }

}
