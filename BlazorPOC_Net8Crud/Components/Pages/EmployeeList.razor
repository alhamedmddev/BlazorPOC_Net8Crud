@page "/EmployeeList"
@inject IEmployeeService _empService
@rendermode InteractiveServer


<PageTitle>Employee Details</PageTitle>
<h3>EmployeeList</h3>

<div class="row">
    <div class="col-md-6">
        <a href='/addemployee' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Employee
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>

@if (empList.Count == 0)
{
    <p> <em>Loading employee list.....</em> </p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Designation</th>
                <th>Cell No</th>
                <th>E-mail</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in empList)
            {
                <tr>
                    <td>@emp.Id</td>
                    <td>@emp.FirstName</td>
                    <td>@emp.LastName</td>
                    <td>@emp.Designation</td>
                    <td>@emp.PhoneNo</td>
                    <td>@emp.Email</td>
                    <td>
                        <a href='/editemployee/@emp.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/DeleteEmployee/@emp.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    List<EmployeeVM> empList = new List<EmployeeVM>();
    protected string SearchString { get; set; } = string.Empty;
    protected List<EmployeeVM> searchUserData = new();
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    protected async Task GetUser()
    {

        var result = await _empService.GetEmployeeAsync();
        if (result.IsGetSuccess)
        {
            empList = result.employeeVM;
            searchUserData = empList;
        }
        
       
    }
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            empList = searchUserData
                .Where(x => x.FirstName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            empList = searchUserData;
        }
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        empList = searchUserData;
    }

}
